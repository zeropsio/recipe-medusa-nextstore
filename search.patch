Subject: [PATCH] Add search to storefront
---
Index: src/modules/search/templates/search-results-template/index.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/modules/search/templates/search-results-template/index.tsx b/src/modules/search/templates/search-results-template/index.tsx
new file mode 100644
--- /dev/null	(date 1738512096945)
+++ b/src/modules/search/templates/search-results-template/index.tsx	(date 1738512096945)
@@ -0,0 +1,63 @@
+import { Heading, Text } from "@medusajs/ui"
+import Link from "next/link"
+
+import RefinementList from "@modules/store/components/refinement-list"
+import { SortOptions } from "@modules/store/components/refinement-list/sort-products"
+import PaginatedProducts from "@modules/store/templates/paginated-products"
+import LocalizedClientLink from "@modules/common/components/localized-client-link"
+
+type SearchResultsTemplateProps = {
+  query: string
+  ids: string[]
+  sortBy?: SortOptions
+  page?: string
+  countryCode: string
+}
+
+const SearchResultsTemplate = ({
+  query,
+  ids,
+  sortBy,
+  page,
+  countryCode,
+}: SearchResultsTemplateProps) => {
+  const pageNumber = page ? parseInt(page) : 1
+
+  return (
+    <>
+      <div className="flex justify-between border-b w-full py-6 px-8 small:px-14 items-center">
+        <div className="flex flex-col items-start">
+          <Text className="text-ui-fg-muted">Search Results for:</Text>
+          <Heading>
+            {decodeURI(query)} ({ids.length})
+          </Heading>
+        </div>
+        <LocalizedClientLink
+          href="/store"
+          className="txt-medium text-ui-fg-subtle hover:text-ui-fg-base"
+        >
+          Clear
+        </LocalizedClientLink>
+      </div>
+      <div className="flex flex-col small:flex-row small:items-start p-6">
+        {ids.length > 0 ? (
+          <>
+            <RefinementList sortBy={sortBy || "created_at"} search />
+            <div className="content-container">
+              <PaginatedProducts
+                productsIds={ids}
+                sortBy={sortBy}
+                page={pageNumber}
+                countryCode={countryCode}
+              />
+            </div>
+          </>
+        ) : (
+          <Text className="ml-8 small:ml-14 mt-3">No results.</Text>
+        )}
+      </div>
+    </>
+  )
+}
+
+export default SearchResultsTemplate
Index: src/modules/search/components/hit/index.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/modules/search/components/hit/index.tsx b/src/modules/search/components/hit/index.tsx
new file mode 100644
--- /dev/null	(date 1738512096945)
+++ b/src/modules/search/components/hit/index.tsx	(date 1738512096945)
@@ -0,0 +1,52 @@
+import { Container, Text } from "@medusajs/ui"
+
+import Thumbnail from "@modules/products/components/thumbnail"
+import LocalizedClientLink from "@modules/common/components/localized-client-link"
+import { HttpTypes } from "@medusajs/types"
+
+export type ProductHit = {
+  id: string
+  title: string
+  handle: string
+  description: string | null
+  thumbnail: string | null
+  variants: HttpTypes.StoreProductVariant[]
+  collection_handle: string | null
+  collection_id: string | null
+}
+
+type HitProps = {
+  hit: ProductHit
+}
+
+const Hit = ({ hit }: HitProps) => {
+  return (
+    <LocalizedClientLink
+      href={`/products/${hit.handle}`}
+      data-testid="search-result"
+    >
+      <Container
+        key={hit.id}
+        className="flex sm:flex-col gap-2 w-full p-4 shadow-elevation-card-rest hover:shadow-elevation-card-hover items-center sm:justify-center"
+      >
+        <Thumbnail
+          thumbnail={hit.thumbnail}
+          size="square"
+          className="group h-12 w-12 sm:h-full sm:w-full"
+        />
+        <div className="flex flex-col justify-between group">
+          <div className="flex flex-col">
+            <Text
+              className="text-ui-fg-subtle"
+              data-testid="search-result-title"
+            >
+              {hit.title}
+            </Text>
+          </div>
+        </div>
+      </Container>
+    </LocalizedClientLink>
+  )
+}
+
+export default Hit
Index: src/modules/search/components/hits/index.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/modules/search/components/hits/index.tsx b/src/modules/search/components/hits/index.tsx
new file mode 100644
--- /dev/null	(date 1738512128155)
+++ b/src/modules/search/components/hits/index.tsx	(date 1738512128155)
@@ -0,0 +1,56 @@
+import { clx } from "@medusajs/ui"
+import React, { type JSX } from "react";
+import {
+  UseHitsProps,
+  useHits,
+  useSearchBox,
+} from "react-instantsearch"
+
+import { ProductHit } from "../hit"
+import ShowAll from "../show-all"
+
+type HitsProps<THit> = React.ComponentProps<"div"> &
+  UseHitsProps & {
+    hitComponent: (props: { hit: THit }) => JSX.Element
+  }
+
+const Hits = ({
+  hitComponent: Hit,
+  className,
+  ...props
+}: HitsProps<ProductHit>) => {
+  const { query } = useSearchBox()
+  const { hits } = useHits(props)
+
+  return (
+    <div
+      className={clx(
+        "transition-[height,max-height,opacity] duration-300 ease-in-out sm:overflow-hidden w-full sm:w-[50vw] mb-1 p-px",
+        className,
+        {
+          "max-h-full opacity-100": !!query,
+          "max-h-0 opacity-0": !query && !hits.length,
+        }
+      )}
+    >
+      <div
+        className="grid grid-cols-1 sm:grid-cols-3 gap-4 mb-4"
+        data-testid="search-results"
+      >
+        {hits.slice(0, 6).map((hit, index) => (
+          <li
+            key={index}
+            className={clx("list-none", {
+              "hidden sm:block": index > 2,
+            })}
+          >
+            <Hit hit={hit as unknown as ProductHit} />
+          </li>
+        ))}
+      </div>
+      <ShowAll />
+    </div>
+  )
+}
+
+export default Hits
Index: src/modules/search/components/show-all/index.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/modules/search/components/show-all/index.tsx b/src/modules/search/components/show-all/index.tsx
new file mode 100644
--- /dev/null	(date 1738512166503)
+++ b/src/modules/search/components/show-all/index.tsx	(date 1738512166503)
@@ -0,0 +1,33 @@
+import { Container, Text } from "@medusajs/ui"
+import { useHits, useSearchBox } from "react-instantsearch"
+
+import InteractiveLink from "@modules/common/components/interactive-link"
+
+const ShowAll = () => {
+  const { hits } = useHits()
+  const { query } = useSearchBox()
+  const width = typeof window !== "undefined" ? window.innerWidth : 0
+
+  if (query === "") return null
+  if (hits.length > 0 && hits.length <= 6) return null
+
+  if (hits.length === 0) {
+    return (
+      <Container
+        className="flex gap-2 justify-center h-fit py-2"
+        data-testid="no-search-results-container"
+      >
+        <Text>No results found.</Text>
+      </Container>
+    )
+  }
+
+  return (
+    <Container className="flex sm:flex-col small:flex-row gap-2 justify-center items-center h-fit py-4 small:py-2">
+      <Text>Showing the first {width > 640 ? 6 : 3} results.</Text>
+      <InteractiveLink href={`/results/${query}`}>View all</InteractiveLink>
+    </Container>
+  )
+}
+
+export default ShowAll
Index: src/modules/layout/components/side-menu/index.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/modules/layout/components/side-menu/index.tsx b/src/modules/layout/components/side-menu/index.tsx
--- a/src/modules/layout/components/side-menu/index.tsx	(revision 8db3a5ea6bf08afa49a38ac70bfe5c943fee02ef)
+++ b/src/modules/layout/components/side-menu/index.tsx	(date 1738512096945)
@@ -12,6 +12,7 @@
 const SideMenuItems = {
   Home: "/",
   Store: "/store",
+  Search: "/search",
   Account: "/account",
   Cart: "/cart",
 }
Index: src/modules/search/templates/search-modal/index.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/modules/search/templates/search-modal/index.tsx b/src/modules/search/templates/search-modal/index.tsx
new file mode 100644
--- /dev/null	(date 1738512166498)
+++ b/src/modules/search/templates/search-modal/index.tsx	(date 1738512166498)
@@ -0,0 +1,84 @@
+"use client"
+
+import { InstantSearch } from "react-instantsearch"
+import { useRouter } from "next/navigation"
+import { MagnifyingGlassMini } from "@medusajs/icons"
+
+import { SEARCH_INDEX_NAME, searchClient } from "@lib/search-client"
+import Hit from "@modules/search/components/hit"
+import Hits from "@modules/search/components/hits"
+import SearchBox from "@modules/search/components/search-box"
+import { useEffect, useRef } from "react"
+
+export default function SearchModal() {
+  const router = useRouter()
+  const searchRef = useRef(null)
+
+  // close modal on outside click
+  const handleOutsideClick = (event: MouseEvent) => {
+    if (event.target === searchRef.current) {
+      router.back()
+    }
+  }
+
+  useEffect(() => {
+    window.addEventListener("click", handleOutsideClick)
+    // cleanup
+    return () => {
+      window.removeEventListener("click", handleOutsideClick)
+    }
+    // eslint-disable-next-line react-hooks/exhaustive-deps
+  }, [])
+
+  // disable scroll on body when modal is open
+  useEffect(() => {
+    document.body.style.overflow = "hidden"
+    return () => {
+      document.body.style.overflow = "unset"
+    }
+  }, [])
+
+  // on escape key press, close modal
+  useEffect(() => {
+    const handleEsc = (event: KeyboardEvent) => {
+      if (event.key === "Escape") {
+        router.back()
+      }
+    }
+    window.addEventListener("keydown", handleEsc)
+
+    // cleanup
+    return () => {
+      window.removeEventListener("keydown", handleEsc)
+    }
+    // eslint-disable-next-line react-hooks/exhaustive-deps
+  }, [])
+
+  return (
+    <div className="relative z-[75]">
+      <div className="fixed inset-0 bg-opacity-75 backdrop-blur-md opacity-100 h-screen w-screen" />
+      <div className="fixed inset-0 px-5 sm:p-0" ref={searchRef}>
+        <div className="flex flex-col justify-start w-full h-fit transform p-5 items-center text-left align-middle transition-all max-h-[75vh] bg-transparent shadow-none">
+          {/* @ts-ignore */}
+          <InstantSearch
+            indexName={SEARCH_INDEX_NAME}
+            searchClient={searchClient}
+          >
+            <div
+              className="flex absolute flex-col h-fit w-full sm:w-fit"
+              data-testid="search-modal-container"
+            >
+              <div className="w-full flex items-center gap-x-2 p-4 bg-[rgba(3,7,18,0.5)] text-ui-fg-on-color backdrop-blur-2xl rounded-rounded">
+                <MagnifyingGlassMini />
+                <SearchBox />
+              </div>
+              <div className="flex-1 mt-6">
+                <Hits hitComponent={Hit} />
+              </div>
+            </div>
+          </InstantSearch>
+        </div>
+      </div>
+    </div>
+  )
+}
Index: src/app/[countryCode]/(main)/search/page.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/[countryCode]/(main)/search/page.tsx b/src/app/[countryCode]/(main)/search/page.tsx
new file mode 100644
--- /dev/null	(date 1738512096945)
+++ b/src/app/[countryCode]/(main)/search/page.tsx	(date 1738512096945)
@@ -0,0 +1,5 @@
+import SearchModal from "@modules/search/templates/search-modal"
+
+export default function SearchModalRoute() {
+  return <SearchModal />
+}
Index: src/app/[countryCode]/(main)/results/[query]/page.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/[countryCode]/(main)/results/[query]/page.tsx b/src/app/[countryCode]/(main)/results/[query]/page.tsx
new file mode 100644
--- /dev/null	(date 1738512096945)
+++ b/src/app/[countryCode]/(main)/results/[query]/page.tsx	(date 1738512096945)
@@ -0,0 +1,44 @@
+import { Metadata } from "next"
+
+import SearchResultsTemplate from "@modules/search/templates/search-results-template"
+
+import { search } from "@modules/search/actions"
+import { SortOptions } from "@modules/store/components/refinement-list/sort-products"
+
+export const metadata: Metadata = {
+  title: "Search",
+  description: "Explore all of our products.",
+}
+
+type Params = {
+  params: Promise<{ query: string; countryCode: string }>
+  searchParams: Promise<{
+    sortBy?: SortOptions
+    page?: string
+  }>
+}
+
+export default async function SearchResults(props: Params) {
+  const searchParams = await props.searchParams;
+  const params = await props.params;
+  const { query } = params
+  const { sortBy, page } = searchParams
+
+  const hits = await search(query).then((data) => data)
+
+  const ids = hits
+    .map((h) => h.objectID || h.id)
+    .filter((id): id is string => {
+      return typeof id === "string"
+    })
+
+  return (
+    <SearchResultsTemplate
+      query={query}
+      ids={ids}
+      sortBy={sortBy}
+      page={page}
+      countryCode={params.countryCode}
+    />
+  )
+}
Index: src/modules/search/components/search-box/index.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/modules/search/components/search-box/index.tsx b/src/modules/search/components/search-box/index.tsx
new file mode 100644
--- /dev/null	(date 1738512096945)
+++ b/src/modules/search/components/search-box/index.tsx	(date 1738512096945)
@@ -0,0 +1,91 @@
+import { XMarkMini } from "@medusajs/icons"
+import { FormEvent } from "react"
+import { useRouter } from "next/navigation"
+
+import SearchBoxWrapper, {
+  ControlledSearchBoxProps,
+} from "../search-box-wrapper"
+
+const ControlledSearchBox = ({
+  inputRef,
+  onChange,
+  onReset,
+  onSubmit,
+  placeholder,
+  value,
+  ...props
+}: ControlledSearchBoxProps) => {
+  const handleSubmit = (event: FormEvent) => {
+    event.preventDefault()
+    event.stopPropagation()
+
+    if (onSubmit) {
+      onSubmit(event)
+    }
+
+    if (inputRef.current) {
+      inputRef.current.blur()
+    }
+  }
+
+  const handleReset = (event: FormEvent) => {
+    event.preventDefault()
+    event.stopPropagation()
+
+    onReset(event)
+
+    if (inputRef.current) {
+      inputRef.current.focus()
+    }
+  }
+
+  return (
+    <div {...props} className="w-full">
+      <form action="" noValidate onSubmit={handleSubmit} onReset={handleReset}>
+        <div className="flex items-center justify-between">
+          <input
+            ref={inputRef}
+            data-testid="search-input"
+            autoComplete="off"
+            autoCorrect="off"
+            autoCapitalize="off"
+            placeholder={placeholder}
+            spellCheck={false}
+            type="search"
+            value={value}
+            onChange={onChange}
+            className="txt-compact-large h-6 placeholder:text-ui-fg-on-color placeholder:transition-colors focus:outline-none flex-1 bg-transparent "
+          />
+          {value && (
+            <button
+              onClick={handleReset}
+              type="button"
+              className="items-center justify-center text-ui-fg-on-color focus:outline-none gap-x-2 px-2 txt-compact-large flex"
+            >
+              <XMarkMini />
+              Cancel
+            </button>
+          )}
+        </div>
+      </form>
+    </div>
+  )
+}
+
+const SearchBox = () => {
+  const router = useRouter()
+
+  return (
+    <SearchBoxWrapper>
+      {(props) => {
+        return (
+          <>
+            <ControlledSearchBox {...props} />
+          </>
+        )
+      }}
+    </SearchBoxWrapper>
+  )
+}
+
+export default SearchBox
Index: src/modules/search/components/search-box-wrapper/index.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/modules/search/components/search-box-wrapper/index.tsx b/src/modules/search/components/search-box-wrapper/index.tsx
new file mode 100644
--- /dev/null	(date 1738512166491)
+++ b/src/modules/search/components/search-box-wrapper/index.tsx	(date 1738512166491)
@@ -0,0 +1,93 @@
+import { useRouter } from "next/navigation"
+import {
+  ChangeEvent,
+  FormEvent,
+  RefObject,
+  useEffect,
+  useRef,
+  useState,
+} from "react"
+import { UseSearchBoxProps, useSearchBox } from "react-instantsearch"
+
+export type ControlledSearchBoxProps = React.ComponentProps<"div"> & {
+  inputRef: RefObject<HTMLInputElement | null>
+  onChange(event: ChangeEvent): void
+  onReset(event: FormEvent): void
+  onSubmit?(event: FormEvent): void
+  placeholder?: string
+  value: string
+}
+
+type SearchBoxProps = {
+  children: (state: {
+    value: string
+    inputRef: RefObject<HTMLInputElement | null>
+    onChange: (event: ChangeEvent<HTMLInputElement>) => void
+    onReset: () => void
+    placeholder: string
+  }) => React.ReactNode
+  placeholder?: string
+} & UseSearchBoxProps
+
+const SearchBoxWrapper = ({
+  children,
+  placeholder = "Search products...",
+  ...rest
+}: SearchBoxProps) => {
+  const { query, refine } = useSearchBox(rest)
+  const [value, setValue] = useState(query)
+  const inputRef = useRef<HTMLInputElement>(null)
+
+  const router = useRouter()
+
+  const onReset = () => {
+    setValue("")
+  }
+
+  const onChange = (event: ChangeEvent<HTMLInputElement>) => {
+    setValue(event.currentTarget.value)
+  }
+
+  const onSubmit = () => {
+    if (value) {
+      router.push(`/results/${value}`)
+    }
+  }
+
+  useEffect(() => {
+    if (query !== value) {
+      refine(value)
+    }
+    // We don't want to track when the InstantSearch query changes.
+    // eslint-disable-next-line react-hooks/exhaustive-deps
+  }, [value])
+
+  useEffect(() => {
+    // We bypass the state update if the input is focused to avoid concurrent
+    // updates when typing.
+    if (document.activeElement !== inputRef.current && query !== value) {
+      setValue(query)
+    }
+    // We don't want to track when the React state value changes.
+    // eslint-disable-next-line react-hooks/exhaustive-deps
+  }, [query])
+
+  useEffect(() => {
+    if (inputRef.current) {
+      inputRef.current.focus()
+    }
+  }, [])
+
+  const state = {
+    value,
+    inputRef,
+    onChange,
+    onSubmit,
+    onReset,
+    placeholder,
+  }
+
+  return children(state) as React.ReactElement
+}
+
+export default SearchBoxWrapper
Index: src/modules/layout/templates/nav/index.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/modules/layout/templates/nav/index.tsx b/src/modules/layout/templates/nav/index.tsx
--- a/src/modules/layout/templates/nav/index.tsx	(revision 8db3a5ea6bf08afa49a38ac70bfe5c943fee02ef)
+++ b/src/modules/layout/templates/nav/index.tsx	(date 1738512096945)
@@ -31,6 +31,16 @@

           <div className="flex items-center gap-x-6 h-full flex-1 basis-0 justify-end">
             <div className="hidden small:flex items-center gap-x-6 h-full">
+              {process.env.NEXT_PUBLIC_FEATURE_SEARCH_ENABLED && (
+                <LocalizedClientLink
+                  className="hover:text-ui-fg-base"
+                  href="/search"
+                  scroll={false}
+                  data-testid="nav-search-link"
+                >
+                  Search
+                </LocalizedClientLink>
+              )}
               <LocalizedClientLink
                 className="hover:text-ui-fg-base"
                 href="/account"
Index: src/modules/search/actions.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/modules/search/actions.ts b/src/modules/search/actions.ts
new file mode 100644
--- /dev/null	(date 1738512192955)
+++ b/src/modules/search/actions.ts	(date 1738512192955)
@@ -0,0 +1,25 @@
+"use server"
+
+import { SEARCH_INDEX_NAME, searchClient } from "@lib/search-client"
+
+interface Hits {
+  readonly objectID?: string
+  id?: string
+  [x: string | number | symbol]: unknown
+}
+
+/**
+ * Uses MeiliSearch to search for a query
+ * @param {string} query - search query
+ */
+export async function search(query: string) {
+  // MeiliSearch
+  const queries = [{ params: { query }, indexName: SEARCH_INDEX_NAME }]
+  const { results } = (await searchClient.search(queries)) as Record<
+    string,
+    any
+  >
+  const { hits } = results[0] as { hits: Hits[] }
+
+  return hits
+}
Index: src/lib/search-client.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/lib/search-client.ts b/src/lib/search-client.ts
new file mode 100644
--- /dev/null	(date 1738513866275)
+++ b/src/lib/search-client.ts	(date 1738513866275)
@@ -0,0 +1,15 @@
+import { instantMeiliSearch } from "@meilisearch/instant-meilisearch"
+import { SearchClient } from "instantsearch.js";
+
+const endpoint =
+  process.env.NEXT_PUBLIC_SEARCH_ENDPOINT || "http://127.0.0.1:7700"
+
+const apiKey = process.env.NEXT_PUBLIC_SEARCH_API_KEY || "test_key"
+
+const ms = instantMeiliSearch(endpoint, apiKey)
+export const searchClient = (ms.searchClient as unknown) as SearchClient
+
+console.log(searchClient)
+
+export const SEARCH_INDEX_NAME =
+  process.env.NEXT_PUBLIC_INDEX_NAME || "products"
